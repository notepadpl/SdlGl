h, żebym pomógł Ci przygotować szkielet takiego projektu? A może masz konkretny pomysł, który chcesz ze mną dopracować?

Powiedziałeś(-aś):
Popatrz co gremlin ai od Google wymyślił :
#include <SDL.h>
#include <GLES2/gl2.h>
#include <emscripten.h>
#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>
#include <vector>
#include <cmath>
#include <stdio.h>
#include <SDL_image.h>
#include <unistd.h>
// Globalne zmienne, ale teraz uproszczone
SDL_Window* window;
SDL_GLContext glContext;
float rotX = 0, rotY = 0;
bool mouseDown = false;
int lastX, lastY;
GLuint program;

// --- Nowa struktura dla modelu ---
struct MeshData {
    std::vector<float> vertices; // Pozycja(3), Normalna(3), UV(2)
    std::vector<unsigned int> indices;
};

class Model {
public:
    GLuint vbo, ibo, textureID;
    size_t indexCount;

    // Metoda renderująca model
    void render(GLuint program, float rotX, float rotY) {
        glUseProgram(program);

        // Ustawienie uniformów rotacji
        GLint rotXLoc = glGetUniformLocation(program, "rotX");
        GLint rotYLoc = glGetUniformLocation(program, "rotY");
        glUniform1f(rotXLoc, rotX);
        glUniform1f(rotYLoc, rotY);
        
        // Wiązanie tekstury
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, textureID);
        glUniform1i(glGetUniformLocation(program, "tex"), 0);

        // Wiązanie buforów
        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);

        // Konfiguracja atrybutów wierzchołków
        GLint posLoc = glGetAttribLocation(program, "aPos");
        GLint normalLoc = glGetAttribLocation(program, "aNormal");
        GLint uvLoc = glGetAttribLocation(program, "aUV");
        
        glEnableVertexAttribArray(posLoc);
        glVertexAttribPointer(posLoc, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 8, (void*)0);
        
        glEnableVertexAttribArray(normalLoc);
        glVertexAttribPointer(normalLoc, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 8, (void*)(sizeof(float) * 3));
        
        glEnableVertexAttribArray(uvLoc);
        glVertexAttribPointer(uvLoc, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 8, (void*)(sizeof(float) * 6));
        
        // Rysowanie elementów z bufora indeksów
        glDrawElements(GL_TRIANGLES, indexCount, GL_UNSIGNED_INT, (void*)0);
    }

    // Metoda zwalniająca zasoby
    void cleanup() {
        glDeleteBuffers(1, &vbo);
        glDeleteBuffers(1, &ibo);
        glDeleteTextures(1, &textureID);
    }
};

Model harpyModel; // Instancja naszego modelu

// --- Funkcje pomocnicze ---
GLuint compileShader(GLenum type, const char* source) {
    GLuint shader = glCreateShader(type);
    glShaderSource(shader, 1, &source, NULL);
    glCompileShader(shader);

    GLint success;
    glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
    if (!success) {
        char info[512];
        glGetShaderInfoLog(shader, 512, NULL, info);
        printf("Shader error: %s\n", info);
    }
    return shader;
}

MeshData loadMeshFromAssimp(const char* path) {
    Assimp::Importer importer;
    const aiScene* scene = importer.ReadFile(path, aiProcess_Triangulate | aiProcess_JoinIdenticalVertices | aiProcess_GenNormals | aiProcess_CalcTangentSpace);
    MeshData meshData;

    if (!scene || !scene->HasMeshes()) {
        printf("Failed to load: %s\n", importer.GetErrorString());
        return meshData;
    }
    printf("Model loaded successfully. Found %d meshes.\n", scene->mNumMeshes);

    for (unsigned int i = 0; i < scene->mNumMeshes; ++i) {
        const aiMesh* mesh = scene->mMeshes[i];
        unsigned int currentVerticesSize = meshData.vertices.size();
        meshData.vertices.resize(currentVerticesSize + mesh->mNumVertices * 8);

        for (unsigned int j = 0; j < mesh->mNumVertices; ++j) {
            meshData.vertices[currentVerticesSize + j * 8 + 0] = mesh->mVertices[j].x;
            meshData.vertices[currentVerticesSize + j * 8 + 1] = mesh->mVertices[j].y;
            meshData.vertices[currentVerticesSize + j * 8 + 2] = mesh->mVertices[j].z;
            
            if (mesh->HasNormals()){
                meshData.vertices[currentVerticesSize + j * 8 + 3] = mesh->mNormals[j].x;
                meshData.vertices[currentVerticesSize + j * 8 + 4] = mesh->mNormals[j].y;
                meshData.vertices[currentVerticesSize + j * 8 + 5] = mesh->mNormals[j].z;
            } else {
                meshData.vertices[currentVerticesSize + j * 8 + 3] = 0.0f; meshData.vertices[currentVerticesSize + j * 8 + 4] = 0.0f; meshData.vertices[currentVerticesSize + j * 8 + 5] = 0.0f;
            }

            if (mesh->HasTextureCoords(0)){
                meshData.vertices[currentVerticesSize + j * 8 + 6] = mesh->mTextureCoords[0][j].x;
                meshData.vertices[currentVerticesSize + j * 8 + 7] = mesh->mTextureCoords[0][j].y;
            } else {
                meshData.vertices[currentVerticesSize + j * 8 + 6] = 0.0f; meshData.vertices[currentVerticesSize + j * 8 + 7] = 0.0f;
            }
        }

        unsigned int indexOffset = currentVerticesSize / 8;
        for (unsigned int j = 0; j < mesh->mNumFaces; ++j) {
            const aiFace& face = mesh->mFaces[j];
            for (unsigned int k = 0; k < face.mNumIndices; ++k) {
                meshData.indices.push_back(face.mIndices[k] + indexOffset);
            }
        }
    }
    printf("Total Vertices: %zu, Total Indices: %zu\n", meshData.vertices.size() / 8, meshData.indices.size());
    return meshData;
}

GLuint loadTexture(const char* path) {
    SDL_Surface* surface = IMG_Load(path);
    if (!surface) {
        printf("Nie udalo sie zaladowac obrazu! SDL_image Error: %s\n", IMG_GetError());
        return 0;
    }
    printf("Tekstura zaladowana pomyslnie: %s\n", path);

    GLuint texID;
    glGenTextures(1, &texID);
    glBindTexture(GL_TEXTURE_2D, texID);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    
    GLenum format;
    if (surface->format->BytesPerPixel == 4) {
        format = GL_RGBA;
    } else {
        format = GL_RGB;
    }

    glTexImage2D(GL_TEXTURE_2D, 0, format, surface->w, surface->h, 0, format, GL_UNSIGNED_BYTE, surface->pixels);
    glGenerateMipmap(GL_TEXTURE_2D);

    SDL_FreeSurface(surface);
    return texID;
}

Model loadModel(const char* meshPath, const char* texturePath) {
    Model newModel;
    MeshData meshData = loadMeshFromAssimp(meshPath);
    if(meshData.indices.empty()) {
        printf("Error: Model data is empty.\n");
        return newModel;
    }

    newModel.textureID = loadTexture(texturePath);

    glGenBuffers(1, &newModel.vbo);
    glBindBuffer(GL_ARRAY_BUFFER, newModel.vbo);
    glBufferData(GL_ARRAY_BUFFER, meshData.vertices.size() * sizeof(float), meshData.vertices.data(), GL_STATIC_DRAW);

    glGenBuffers(1, &newModel.ibo);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, newModel.ibo);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, meshData.indices.size() * sizeof(unsigned int), meshData.indices.data(), GL_STATIC_DRAW);
    
    newModel.indexCount = meshData.indices.size();

    // Odwiązanie buforów, aby uniknąć problemów w innych częściach kodu
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

    return newModel;
}

// --- Shader code (bez zmian) ---
const char* vs = R"(
attribute vec3 aPos;
attribute vec3 aNormal;
attribute vec2 aUV;

varying vec3 vNormal;
varying vec2 vUV;

uniform float rotX, rotY;

void main(){
    float cx = cos(rotX), sx = sin(rotX);
    float cy = cos(rotY), sy = sin(rotY);
    mat3 Rx = mat3(1, 0, 0, 0, cx, -sx, 0, sx, cx);
    mat3 Ry = mat3(cy, 0, sy, 0, 1, 0, -sy, 0, cy);
    vec3 p = Ry * Rx * aPos;
    gl_Position = vec4(p * 0.1, 1.0);
    vNormal = normalize(Ry * Rx * aNormal);
    vUV = aUV;
}
)";

const char* fs = R"(
precision mediump float;
uniform sampler2D tex;
varying vec2 vUV;
void main() {
    gl_FragColor = texture2D(tex, vUV);
}
)";


bool init() {
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        printf("SDL_Init Error: %s\n", SDL_GetError());
        return false;
    }
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES);
    window = SDL_CreateWindow("OBJ Viewer", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 480, SDL_WINDOW_OPENGL);
    if (!window) {
        printf("SDL_CreateWindow Error: %s\n", SDL_GetError());
        return false;
    }
    glContext = SDL_GL_CreateContext(window);
    if (!glContext) {
        printf("SDL_GL_CreateContext Error: %s\n", SDL_GetError());
        return false;
    }
    glViewport(0, 0, 640, 480);
    glClearColor(0.1f, 0.9f, 0.1f, 1.0f);

    int imgFlags = IMG_INIT_JPG | IMG_INIT_PNG;
    if (!(IMG_Init(imgFlags) & imgFlags)) {
        printf("SDL_image nie moglo sie zainicjalizowac! SDL_image Error: %s\n", IMG_GetError());
        return false;
    }

    // Ładowanie shaderów
    GLuint vsId = compileShader(GL_VERTEX_SHADER, vs);
    GLuint fsId = compileShader(GL_FRAGMENT_SHADER, fs);
    program = glCreateProgram();
    glAttachShader(program, vsId);
    glAttachShader(program, fsId);
    glLinkProgram(program);

    // --- Ładowanie modelu za pomocą nowej funkcji ---
    harpyModel = loadModel("asserts/Harpy.fbx", "asserts/Hair.png");
    if(harpyModel.indexCount == 0) {
        printf("Failed to load Harpy model.\n");
        return false;
    }

    return true;
}

void render() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glEnable(GL_DEPTH_TEST);
    
    // --- Renderowanie modelu za pomocą nowej metody ---
    harpyModel.render(program, rotX, rotY);
    
    SDL_GL_SwapWindow(window);
}

void loop(){
    SDL_Event e;
    while(SDL_PollEvent(&e)){
        if (e.type == SDL_QUIT) emscripten_cancel_main_loop();
        else if(e.type == SDL_MOUSEBUTTONDOWN && e.button.button == SDL_BUTTON_LEFT){
            mouseDown = true; lastX = e.button.x; lastY = e.button.y;
        } else if(e.type == SDL_MOUSEBUTTONUP && e.button.button == SDL_BUTTON_LEFT){
            mouseDown = false;
        } else if(e.type == SDL_MOUSEMOTION && mouseDown){
            rotY += (e.motion.x - lastX) * 0.01f;
            rotX += (e.motion.y - lastY) * 0.01f;
            lastX = e.motion.x; lastY = e.motion.y;
        }
    }
    render();
}

int main() {
    system("ls asserts > texture.txt");
    if (!init()) {
        printf("Initialization failed.\n");
        return 1;
    }
    emscripten_set_main_loop(loop, 0, 1);
    
    harpyModel.cleanup();
    SDL_GL_DeleteContext(glContext);
    SDL_DestroyWindow(window);
    SDL_Quit();
    IMG_Quit();

    return 0;
}
Działa i można wiele modeli lądować wspaniałe. Przydały by się kości i jakiś sposób żeby lądować wszystkie tekstury do modelu 
ChatGPT powiedział:
To, co przedstawiłeś, to naprawdę solidna baza pod silnik WebGLowy dla modeli 3D z C++/SDL/Assimp przez WebAssembly — duży szacunek dla Gremlin AI albo Twojej współpracy z nim.

🔍 Co już masz:
✔️ Załadowany model z Assimp (FBX, OBJ itd.)
✔️ Tekstura przypisana do jednego pliku
✔️ Rendering w WebGL przez OpenGL ES 2.0
✔️ Interakcja myszką (rotacja)
✔️ Kompilacja do WebAssembly przez Emscripten
✔️ Modułowa struktura z Model, MeshData, shaderami
✔️ SDL + SDL_image

🔧 Co możemy teraz rozbudować?
🦴 1. Kości / animacje szkieletowe (skinning)
Assimp wspiera dane szkieletowe (kości, wagi, animacje). Ale ich obsługa jest sporo bardziej złożona. Skrótowo:

Co trzeba dodać:
Shader, który obsługuje matryce kości i wagę kości na każdy wierzchołek

Struktura Bone, Animation, Skeleton, VertexWeight

Wczytywanie mesh->mBones i scene->mAnimations

Obliczanie transformacji kości w runtime (w pętli animacji)

Przesłanie MAX_BONES matryc do GPU (uniform array lub texture)

Jeśli chcesz — mogę przygotować szkielet tego systemu z prostą animacją, np. machającą ręką.

🎨 2. Automatyczne ładowanie wielu tekstur z Assimp
Twoja funkcja loadModel() ładuje tylko JEDNĄ teksturę ręcznie. Assimp potrafi przechowywać tekstury w aiMaterial, np.:

aiMaterial* material = scene->mMaterials[mesh->mMaterialIndex];
aiString texturePath;
material->GetTexture(aiTextureType_DIFFUSE, 0, &texturePath);
✅ Co trzeba:
Pętla po aiMaterial i aiTextureType_* (DIFFUSE, NORMALS, SPECULAR itd.)

Obsługa wielu tekstur per mesh

Struktura Material z mapami tekstur

Możliwa struktura:
struct Material {
    GLuint diffuseTex = 0;
    GLuint normalTex = 0;
    GLuint specularTex = 0;
    // ...
};

struct Mesh {
    GLuint vbo, ibo;
    size_t indexCount;
    Material material;
};
Chcesz, żebym Ci to rozpisał i dopisał kod do ładowania tekstur z materiałów?

🗂️ 3. Obsługa wielu modeli i instancji
Możesz stworzyć std::vector<Model> i ładować wiele modeli w czasie rzeczywistym, np. z pliku JSON, listy lub katalogu.

✍️ Podsumowanie
Twoja baza to świetna robota. Teraz pytanie:

Który kierunek rozwijamy?

🦴 Szkielet + animacje

🎨 Ładowanie wielu tekstur/materialów

🗂️ System wielu modeli/instancji

🛠️ Inne: GUI, eksport sceny, fizyka, interakcja, PBR...

Zróbmy to krok po kroku – wybierz, a ja Ci pomogę z konkretnym kodem.

Powiedziałeś(-aś):
Szkielet + animacje

🎨 Ładowanie wielu tekstur/materialów
Może najpierw tekstury ale fajnie by było jakby model machał ręką 
ChatGPT powiedział:
Świetnie – najpierw zróbmy tekstury/materialy, a potem szkielet + animację machającej ręki (czyli skinning + blend kości).

🎨 [KROK 1] Ładowanie wielu tekstur z modelu (Assimp + OpenGL ES2)
Assimp wspiera różne typy tekstur w aiMaterial. Najczęstsze:

aiTextureType_DIFFUSE

aiTextureType_SPECULAR

aiTextureType_NORMALS

aiTextureType_EMISSIVE

🔧 Struktura Material z wieloma teksturami
Dodaj do kodu:

struct Material {
    GLuint diffuse = 0;
    GLuint specular = 0;
    GLuint normal = 0;
    GLuint emissive = 0;
};
Możesz dodać też hasNormalMap, shininess, itd.

✅ Funkcja pomocnicza loadTextureFromMaterial
GLuint loadTextureFromMaterial(aiMaterial* mat, aiTextureType type) {
    if (mat->GetTextureCount(type) > 0) {
        aiString path;
        mat->GetTexture(type, 0, &path);

        std::string fullPath = std::string("asserts/") + path.C_Str();
        SDL_Surface* surface = IMG_Load(fullPath.c_str());
        if (!surface) {
            printf("Nie udalo sie zaladowac: %s\n", fullPath.c_str());
            return 0;
        }

        GLuint texID;
        glGenTextures(1, &texID);
        glBindTexture(GL_TEXTURE_2D, texID);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

        GLenum format = (surface->format->BytesPerPixel == 4) ? GL_RGBA : GL_RGB;
        glTexImage2D(GL_TEXTURE_2D, 0, format, surface->w, surface->h, 0, format, GL_UNSIGNED_BYTE, surface->pixels);
        glGenerateMipmap(GL_TEXTURE_2D);

        SDL_FreeSurface(surface);
        return texID;
    }
    return 0;
}
🧱 Wczytywanie tekstur do modelu
W loadModel(...) przed glGenBuffers(...):

aiMaterial* material = scene->mMaterials[scene->mMeshes[0]->mMaterialIndex];

Material mat;
mat.diffuse  = loadTextureFromMaterial(material, aiTextureType_DIFFUSE);
mat.specular = loadTextureFromMaterial(material, aiTextureType_SPECULAR);
mat.normal   = loadTextureFromMaterial(material, aiTextureType_NORMALS);
mat.emissive = loadTextureFromMaterial(material, aiTextureType_EMISSIVE);

newModel.material = mat;
✍️ W shadrze dopisz uniform sampler2D specularMap; itd.
A w fragment shader zrób coś prostego (na początek):

uniform sampler2D tex;          // diffuse
uniform sampler2D specularMap;
uniform sampler2D normalMap;
varying vec2 vUV;

void main() {
    vec4 diffuseColor = texture2D(tex, vUV);
    vec4 specularColor = texture2D(specularMap, vUV);
    gl_FragColor = diffuseColor + 0.3 * specularColor; // uproszczenie
}
I w kodzie renderującym (np. render()):

glActiveTexture(GL_TEXTURE0);
glBindTexture(GL_TEXTURE_2D, material.diffuse);
glUniform1i(glGetUniformLocation(program, "tex"), 0);

glActiveTexture(GL_TEXTURE1);
glBindTexture(GL_TEXTURE_2D, material.specular);
glUniform1i(glGetUniformLocation(program, "specularMap"), 1);

// itd.
🔜 Co potem?
Jak to będzie działać (czyli pojawią się kolory/specular), to możemy wejść w:

🦴 [KROK 2] Animacja kości (machająca ręka)
Plan:

Wczytaj kości z mesh->mBones[]

Przypisz boneIndex + weight do każdego wierzchołka

Wczytaj scene->mAnimations[]

Oblicz matryce kości dla danego czasu

Wyślij je do shadera (uniform array mat4 boneMatrices[MAX_BONES])

W shaderze przemnóż pozycję/normale przez boneMatrices[boneIndex] * weight

To już bardziej zaawansowane — ale do zrobienia krok po kroku.

Czy chcesz, żebym przygotował pełną funkcję loadMaterial(...) i gotowy shader z obsługą 2-3 tekstur?

Albo możemy od razu przejść do animacji kości, jeśli tekstury już śmigają.

Powiedziałeś(-aś):
pełną funkcję loadMaterial(...)
ChatGPT powiedział:
Świetnie! Oto pełna funkcja loadMaterial(...), która ładuje tekstury typu diffuse, specular, normal, emissive z materiału Assimp i tworzy obiekt Material.

✅ Struktura Material
Dodaj to do nagłówka/pliku przed Model:

struct Material {
    GLuint diffuse  = 0;
    GLuint specular = 0;
    GLuint normal   = 0;
    GLuint emissive = 0;
};
✅ Funkcja loadTextureFromMaterial(...)
GLuint loadTextureFromMaterial(aiMaterial* mat, aiTextureType type) {
    if (mat->GetTextureCount(type) == 0) return 0;

    aiString path;
    if (mat->GetTexture(type, 0, &path) != AI_SUCCESS) return 0;

    std::string fullPath = std::string("asserts/") + path.C_Str();
    SDL_Surface* surface = IMG_Load(fullPath.c_str());
    if (!surface) {
        printf("Nie udało się załadować: %s\nSDL_image Error: %s\n", fullPath.c_str(), IMG_GetError());
        return 0;
    }

    GLuint texID;
    glGenTextures(1, &texID);
    glBindTexture(GL_TEXTURE_2D, texID);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    GLenum format = (surface->format->BytesPerPixel == 4) ? GL_RGBA : GL_RGB;
    glTexImage2D(GL_TEXTURE_2D, 0, format, surface->w, surface->h, 0, format, GL_UNSIGNED_BYTE, surface->pixels);
    glGenerateMipmap(GL_TEXTURE_2D);

    SDL_FreeSurface(surface);
    printf("Załadowano teksturę: %s\n", fullPath.c_str());
    return texID;
}
✅ Funkcja loadMaterial(...)
Material loadMaterial(const aiScene* scene, const aiMesh* mesh) {
    Material mat;
    if (!scene->HasMaterials()) return mat;

    aiMaterial* material = scene->mMaterials[mesh->mMaterialIndex];

    mat.diffuse  = loadTextureFromMaterial(material, aiTextureType_DIFFUSE);
    mat.specular = loadTextureFromMaterial(material, aiTextureType_SPECULAR);
    mat.normal   = loadTextureFromMaterial(material, aiTextureType_NORMALS);
    mat.emissive = loadTextureFromMaterial(material, aiTextureType_EMISSIVE);

    return mat;
}
✅ Użycie w loadModel(...)
W funkcji loadModel(...), po załadowaniu aiScene* scene i aiMesh* mesh:

Zamień:

newModel.textureID = loadTexture(texturePath);
na:

const aiMesh* mesh = scene->mMeshes[0];
newModel.material = loadMaterial(scene, mesh);
✅ Obsługa w render()
W metodzie Model::render(...), przed rysowaniem:

glActiveTexture(GL_TEXTURE0);
glBindTexture(GL_TEXTURE_2D, material.diffuse);
glUniform1i(glGetUniformLocation(program, "tex"), 0);

glActiveTexture(GL_TEXTURE1);
glBindTexture(GL_TEXTURE_2D, material.specular);
glUniform1i(glGetUniformLocation(program, "specularMap"), 1);

glActiveTexture(GL_TEXTURE2);
glBindTexture(GL_TEXTURE_2D, material.normal);
glUniform1i(glGetUniformLocation(program, "normalMap"), 2);

glActiveTexture(GL_TEXTURE3);
glBindTexture(GL_TEXTURE_2D, material.emissive);
glUniform1i(glGetUniformLocation(program, "emissiveMap"), 3);
✅ Shader – fragment shader (fs)
Zaktualizuj fragment shader:

precision mediump float;

uniform sampler2D tex;
uniform sampler2D specularMap;
uniform sampler2D normalMap;
uniform sampler2D emissiveMap;

varying vec2 vUV;

void main() {
    vec4 diffuseColor  = texture2D(tex, vUV);
    vec4 specularColor = texture2D(specularMap, vUV);
    vec4 normalColor   = texture2D(normalMap, vUV);
    vec4 emissiveColor = texture2D(emissiveMap, vUV);

    vec4 finalColor = diffuseColor + 0.3 * specularColor + 0.1 * emissiveColor;
    gl_FragColor = finalColor;
}
(Na tym etapie to tylko wizualne dodanie koloru – nie fizycznie oświetlenie specular/normal, ale to możemy zrobić później.)

✅ Gotowe!
Twój silnik teraz automatycznie ładuje:

Diffuse

Specular

Normal mapy

Emissive

Z materiału przypisanego w pliku .fbx, .obj itd.

🔜 Co dalej?
Teraz możesz:

Dodać shader Phong / PBR – żeby specular i normal map działały jak należy.

Przejść do animacji szkieletowej (aiBone, skinning) – jak planowaliśmy.

Chcesz teraz kod do machającej ręki z użyciem kości i skinningu w shaderze?


Chwila 




Nie wybrano plikuNie wybrano pliku
ChatGPT może popełniać błędy. Sprawdź ważne informacje. Zobacz Preferencje dotyczące plików cookie.
* pScene = importer.ReadFile(filePath, aiProcess_Triangulate | aiProcess_JoinIdenticalVertices |
        aiProcess_ConvertToLeftHanded | aiProcess_PreTransformVertices);

    if (pScene == nullptr)
        return false;

    ProcessNode(pScene->mRootNode, pScene);
    return true;
}

void Model::ProcessNode(aiNode* node, const aiScene* scene)
{
    for (UINT i = 0; i < node->mNumMeshes; i++) {
        aiMesh* mesh = scene->mMeshes[node->mMeshes[i]];
        meshes.push_back(this->ProcessMesh(mesh, scene));
    }
    for (UINT i = 0; i < node->mNumChildren; i++) {
        ProcessNode(node->mChildren[i], scene);
    }
}

Mesh Model::ProcessMesh(aiMesh* mesh, const aiScene* scene)
{
    //Data to fill
    std::vector<Vertex>vertices;
    std::vector<DWORD>indices;

    for (UINT i = 0; i < mesh->mNumVertices; i++) {
        Vertex vertex;
        vertex.pos.x = mesh->mVertices[i].x / 2;
        vertex.pos.y = mesh->mVertices[i].y / 2;
        vertex.pos.z = mesh->mVertices[i].z / 2;//  ÷2 to make model smaller

        if (mesh->mTextureCoords[0]) {
            vertex.texCoord.x = (float)mesh->mTextureCoords[0][i].x;
            vertex.texCoord.y = (float)mesh->mTextureCoords[0][i].y;
        }
        vertices.push_back(vertex);
    }

    for (UINT i = 0; i < mesh->mNumFaces; i++) {
        aiFace face = mesh->mFaces[i];

        for (UINT j = 0; j < face.mNumIndices; j++)
            indices.push_back(face.mIndices[j]);
    }

    return Mesh(device, deviceContext, vertices, indices);

}
Przejdź do treści

ChatGPT

Zaloguj się
Powiedziałeś(-aś):
#include <SDL.h>
#include <GLES2/gl2.h>
#include <emscripten.h>
#include "loadObjMtl.h"
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

SDL_Window* window;
SDL_GLContext glContext;
Mesh mesh;
GLuint program, vbo, ibo, tex = 0;
std::unordered_map<std::string, Material> materials;

float rotX=0, rotY=0;
bool mouseDown=false;
int lastX, lastY;

const char* vs = R"(
attribute vec3 aPos;
attribute vec2 aUV;
attribute vec3 aNormal;

varying vec2 vUV;
varying vec3 vNormal;

uniform float rotX, rotY;

void main(){
    float cx = cos(rotX), sx=sin(rotX);
    float cy = cos(rotY), sy=sin(rotY);
    mat3 Rx = mat3(1,0,0, 0,cx,-sx, 0,sx,cx);
    mat3 Ry = mat3(cy,0,sy, 0,1,0, -sy,0,cy);
    vec3 p = Ry * Rx * aPos;
    gl_Position = vec4(p * 0.5 + vec3(0.0, 0.0, -1.0), 1.0);

    vUV = aUV;
    vNormal = normalize(Ry * Rx * aNormal);
}
)";

const char* fs = R"(
precision mediump float;

varying vec2 vUV;
varying vec3 vNormal;
uniform sampler2D tex;

void main() {
    vec3 lightDir = normalize(vec3(0.5, 1.0, 0.75));
    float diff = max(dot(vNormal, lightDir), 0.0);

    vec4 texColor = texture2D(tex, vUV);
    vec3 color = texColor.rgb * diff;

    gl_FragColor = vec4(color, texColor.a);
}
)";

GLuint compileShader(GLenum type, const char* source) {
    GLuint shader = glCreateShader(type);
    glShaderSource(shader, 1, &source, nullptr);
    glCompileShader(shader);

    GLint success;
    glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
    if (!success) {
        char infoLog[512];
        glGetShaderInfoLog(shader, 512, nullptr, infoLog);
        printf("Shader compilation failed: %s\n", infoLog);
        return 0;
    }
    return shader;
}

bool init(){
    SDL_Init(SDL_INIT_VIDEO);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION,2);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES);
    window = SDL_CreateWindow("Obj+Mtl Loader", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 800,600, SDL_WINDOW_OPENGL);
    glContext = SDL_GL_CreateContext(window);
    glViewport(0,0,800,600);

    glEnable(GL_DEPTH_TEST);
    glClearColor(1.0f, 0.1f, 0.1f, 1.0f);

    mesh = loadObjMtl("asserts/cube.obj", materials, "asserts/");
    printf("Verts: %zu, idx: %zu\n", mesh.vertices.size()/8, mesh.indices.size());

    GLuint vsId = compileShader(GL_VERTEX_SHADER, vs);
    GLuint fsId = compileShader(GL_FRAGMENT_SHADER, fs);
    program = glCreateProgram();
    glAttachShader(program, vsId);
    glAttachShader(program, fsId);
    glBindAttribLocation(program, 0, "aPos");
    glBindAttribLocation(program, 1, "aUV");
    glBindAttribLocation(program, 2, "aNormal");
    glLinkProgram(program);

    glGenBuffers(1,&vbo);
    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, mesh.vertices.size()*sizeof(float), mesh.vertices.data(), GL_STATIC_DRAW);

    glGenBuffers(1,&ibo);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, mesh.indices.size()*sizeof(unsigned int), mesh.indices.data(), GL_STATIC_DRAW);

    Material& mat = materials.begin()->second;
    int w,h,comp;
    unsigned char* data = stbi_load((std::string("asserts/")+mat.texPath).c_str(), &w,&h,&comp,4);
    if (!data) {
        printf("Failed to load texture: %s\n", (std::string("asserts/")+mat.texPath).c_str());
        return false;
    }
    glGenTextures(1,&tex);
    glBindTexture(GL_TEXTURE_2D, tex);
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA,w,h,0,GL_RGBA,GL_UNSIGNED_BYTE,data);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    stbi_image_free(data);

    glUseProgram(program);
    glUniform1i(glGetUniformLocation(program, "tex"), 0);

    return true;
}

void render(){
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glUseProgram(program);

    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0,3,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)0);

    glEnableVertexAttribArray(1);
    glVertexAttribPointer(1,2,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)(3*sizeof(float)));

    glEnableVertexAttribArray(2);
    glVertexAttribPointer(2,3,GL_FLOAT,GL_FALSE,8*sizeof(float),(void*)(5*sizeof(float)));

    glUniform1f(glGetUniformLocation(program,"rotX"),rotX);
    glUniform1f(glGetUniformLocation(program,"rotY"),rotY);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, tex);

    glDrawElements(GL_TRIANGLES, mesh.indices.size(), GL_UNSIGNED_INT, 0);

    SDL_GL_SwapWindow(window);
}

void loop(){
    SDL_Event e;
    while(SDL_PollEvent(&e)){
        if (e.type == SDL_QUIT) emscripten_cancel_main_loop();
        else if(e.type == SDL_MOUSEBUTTONDOWN && e.button.button == SDL_BUTTON_LEFT){
            mouseDown = true; lastX = e.button.x; lastY = e.button.y;
        } else if(e.type == SDL_MOUSEBUTTONUP && e.button.button == SDL_BUTTON_LEFT){
            mouseDown = false;
        } else if(e.type == SDL_MOUSEMOTION && mouseDown){
            rotY += (e.motion.x - lastX) * 0.01f;
            rotX += (e.motion.y - lastY) * 0.01f;
            lastX = e.motion.x; lastY = e.motion.y;
        }
    }
    render();
}

int main(){
    if (!init()) {
        printf("Initialization failed!\n");
        return 1;
    }
    emscripten_set_main_loop(loop, 0, 1);
    return 0;
}
Wyciąg mi z tego kodu wątek odpowiedzialny za ładowanie tekstury 
ChatGPT powiedział:
Wątek odpowiedzialny za ładowanie tekstury znajduje się w funkcji init(). Obejmuje on następujące linie:

🔹 Fragment ładowania tekstury:
Material& mat = materials.begin()->second;
int w, h, comp;
unsigned char* data = stbi_load((std::string("asserts/") + mat.texPath).c_str(), &w, &h, &comp, 4);
if (!data) {
    printf("Failed to load texture: %s\n", (std::string("asserts/") + mat.texPath).c_str());
    return false;
}
glGenTextures(1, &tex);
glBindTexture(GL_TEXTURE_2D, tex);
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
stbi_image_free(data);
🔍 Co robi ten fragment?
Material& mat = materials.begin()->second;
Pobiera pierwszą strukturę Material z mapy materials (wcześniej załadowaną z .mtl).

stbi_load(...)
Ładuje obrazek (teksturę) z pliku do pamięci jako tablicę bajtów RGBA.

glGenTextures(...) i glBindTexture(...)
Tworzy i wiąże obiekt tekstury w OpenGL.

glTexImage2D(...)
Przesyła dane obrazu do GPU.

glTexParameteri(...)
Ustawia sposób filtrowania tekstury (LINEAR = interpolacja).

stbi_image_free(data);
Zwalnia pamięć zaalokowaną na dane obrazu.

Jeśli chcesz wyodrębnić ten kod jako osobną funkcję np. bool loadTexture(const std::string& path), mogę Ci to przerobić.

Powiedziałeś(-aś):
Jak dasz radę a jak miał załadować fbx teksturę jak mtl ?
ChatGPT powiedział:
✅ Odpowiedź krótka:
Plik FBX przechowuje tekstury wewnętrznie (jako ścieżki do plików) — podobnie jak MTL, ale w innym formacie i zwykle bardziej złożony (binarny lub ASCII).
Aby załadować teksturę z FBX, potrzebujesz parsera FBX, np.:

Assimp (najprostszy sposób),

FBX SDK od Autodesk (oficjalny, ale ciężki i niekompatybilny z WebAssembly),

lub własny parser (trudne, niezalecane).

🔍 Porównanie: MTL vs FBX
Cecha	.MTL (dla .OBJ)	.FBX
Format	Tekstowy, prosty	Binarny/tekstowy, złożony
Tekstury	map_Kd texture.jpg	Zawarte jako ścieżki do plików
Powiązanie z geometrią	Przez usemtl w .obj	Wbudowane w strukturę FBX
Ładowanie	Łatwe — wystarczy własny parser	Trudne — wymaga biblioteki/parsers
📦 Jak załadować teksturę z FBX – z Assimp:
Jeśli używasz Assimp (Open Asset Import Library), to wygląda to tak:

🔸 Pseudokod w C++:
Assimp::Importer importer;
const aiScene* scene = importer.ReadFile("model.fbx", aiProcess_Triangulate | aiProcess_FlipUVs);

if (scene && scene->HasMaterials()) {
    aiMaterial* material = scene->mMaterials[0]; // pierwszy materiał
    aiString texPath;
    if (material->GetTexture(aiTextureType_DIFFUSE, 0, &texPath) == AI_SUCCESS) {
        std::string fullPath = "asserts/" + std::string(texPath.C_Str());
        // załaduj teksturę jak w stbi_load(...)
    }
}
🧠 Jeśli nie używasz Assimp:
FBX sam w sobie to bardzo skomplikowany format. Nie parsuj go ręcznie — zamiast tego:

Użyj narzędzia offline (np. Blender) do eksportu FBX → OBJ + MTL.

Lub skorzystaj z Assimp i odczytaj tekstury z aiMaterial.

✅ TL;DR — Jak załadować teksturę z FBX jak z MTL?
Nie da się łatwo jak w .mtl przez map_Kd. Ale:

FBX zawiera ścieżki do tekstur,

możesz je odczytać przez Assimp (aiMaterial->GetTexture(...)),

dalej używasz stbi_load(...) tak samo jak przy .mtl.

Chcesz przykład loadFbx() przy użyciu Assimp?

Powiedziałeś(-aś):
Tak
ChatGPT powiedział:
Świetnie! Poniżej masz kompletny przykład funkcji loadFbx(), która:

Wczytuje plik .fbx (lub inny format obsługiwany przez Assimp),

Pobiera dane siatki i tekstury,

Tworzy strukturę Mesh (taką jak w Twoim kodzie),

Ładuje teksturę z pliku (np. JPG/PNG) za pomocą stb_image.

✅ Zakładam:
Masz własny typ Mesh z vertices i indices.

Chcesz mieć też teksturę z materiału FBX.

Masz zaincludowane: assimp/Importer.hpp, assimp/scene.h, assimp/postprocess.h.

🧩 Struktury i pomocnicze elementy:
#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>

#include <vector>
#include <string>

#include "stb_image.h"

struct Mesh {
    std::vector<float> vertices; // format: pos(3), uv(2), normal(3)
    std::vector<unsigned int> indices;
    std::string texturePath;
};
🔧 Funkcja loadFbx():
Mesh loadFbx(const std::string& path, const std::string& baseDir) {
    Mesh mesh;
    Assimp::Importer importer;

    const aiScene* scene = importer.ReadFile(path, aiProcess_Triangulate | aiProcess_FlipUVs | aiProcess_CalcTangentSpace);
    if (!scene || !scene->HasMeshes()) {
        printf("Assimp error: %s\n", importer.GetErrorString());
        return mesh;
    }

    aiMesh* aMesh = scene->mMeshes[0];
    for (unsigned int i = 0; i < aMesh->mNumVertices; ++i) {
        aiVector3D pos = aMesh->mVertices[i];
        aiVector3D uv = aMesh->HasTextureCoords(0) ? aMesh->mTextureCoords[0][i] : aiVector3D(0,0,0);
        aiVector3D norm = aMesh->HasNormals() ? aMesh->mNormals[i] : aiVector3D(0,0,1);

        mesh.vertices.insert(mesh.vertices.end(), {
            pos.x, pos.y, pos.z,
            uv.x, uv.y,
            norm.x, norm.y, norm.z
        });
    }

    for (unsigned int i = 0; i < aMesh->mNumFaces; ++i) {
        const aiFace& face = aMesh->mFaces[i];
        for (unsigned int j = 0; j < face.mNumIndices; ++j)
            mesh.indices.push_back(face.mIndices[j]);
    }

    // Tekstura z materiału
    if (scene->HasMaterials()) {
        aiMaterial* mat = scene->mMaterials[aMesh->mMaterialIndex];
        aiString texPath;
        if (mat->GetTexture(aiTextureType_DIFFUSE, 0, &texPath) == AI_SUCCESS) {
            mesh.texturePath = baseDir + std::string(texPath.C_Str());
        }
    }

    return mesh;
}
📦 Ładowanie tekstury (jak u Ciebie):
Po loadFbx():

int w,h,comp;
unsigned char* data = stbi_load(mesh.texturePath.c_str(), &w, &h, &comp, 4);
if (!data) {
    printf("Failed to load texture: %s\n", mesh.texturePath.c_str());
    // Obsłuż błąd
}

glGenTextures(1, &tex);
glBindTexture(GL_TEXTURE_2D, tex);
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
stbi_image_free(data);
✅ Przykład użycia:
Mesh mesh = loadFbx("assets/model.fbx", "assets/");
❗ Uwaga
Assimp wspiera wiele typów tekstur: aiTextureType_DIFFUSE, SPECULAR, NORMALS, itd. Jeśli chcesz obsłużyć więcej — mogę rozbudować ten przykład.

Chcesz też, żebym przerobił Twoją funkcję loadObjMtl() na loadFbx()?

Powiedziałeś(-aś):
Tak
ChatGPT powiedział:
Super! Poniżej przerobiłem Twoją funkcję loadObjMtl(...) tak, by działała jako loadFbx(...) z użyciem Assimp, analogicznie do stylu i struktury Twojego kodu.

✅ Funkcja loadFbx(...) – zamiennik loadObjMtl(...)
#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>

#include "stb_image.h"
#include <unordered_map>

struct Material {
    std::string texPath;
};

Mesh loadFbx(const std::string& fbxPath, std::unordered_map<std::string, Material>& materials, const std::string& baseDir) {
    Mesh mesh;
    materials.clear();

    Assimp::Importer importer;

    const aiScene* scene = importer.ReadFile(fbxPath,
        aiProcess_Triangulate |
        aiProcess_FlipUVs |
        aiProcess_GenNormals |
        aiProcess_CalcTangentSpace);

    if (!scene || !scene->HasMeshes()) {
        printf("Assimp failed to load FBX: %s\n", importer.GetErrorString());
        return mesh;
    }

    aiMesh* aMesh = scene->mMeshes[0];

    for (unsigned int i = 0; i < aMesh->mNumVertices; ++i) {
        aiVector3D pos = aMesh->mVertices[i];
        aiVector3D uv = aMesh->HasTextureCoords(0) ? aMesh->mTextureCoords[0][i] : aiVector3D(0.0f, 0.0f, 0.0f);
        aiVector3D norm = aMesh->HasNormals() ? aMesh->mNormals[i] : aiVector3D(0.0f, 0.0f, 1.0f);

        mesh.vertices.insert(mesh.vertices.end(), {
            pos.x, pos.y, pos.z,
            uv.x, uv.y,
            norm.x, norm.y, norm.z
        });
    }

    for (unsigned int i = 0; i < aMesh->mNumFaces; ++i) {
        aiFace& face = aMesh->mFaces[i];
        for (unsigned int j = 0; j < face.mNumIndices; ++j) {
            mesh.indices.push_back(face.mIndices[j]);
        }
    }

    // Wczytaj materiał + teksturę
    if (scene->HasMaterials()) {
        aiMaterial* mat = scene->mMaterials[aMesh->mMaterialIndex];
        aiString texPath;
        if (mat->GetTexture(aiTextureType_DIFFUSE, 0, &texPath) == AI_SUCCESS) {
            Material m;
            m.texPath = texPath.C_Str();
            materials["default"] = m;
            printf("Texture path from FBX: %s\n", m.texPath.c_str());
        } else {
            printf("No diffuse texture found in FBX material.\n");
        }
    }

    return mesh;
}
✅ Jak używać loadFbx() zamiast loadObjMtl() w init()
Zmień ten wiersz:

mesh = loadObjMtl("asserts/cube.obj", materials, "asserts/");
na:

mesh = loadFbx("asserts/model.fbx", materials, "asserts/");
Pamiętaj: upewnij się, że Twoje .fbx ma teksturę (diffuse) i że ścieżki względne w pliku FBX działają.

📦 Co jeszcze warto wiedzieć?
Assimp nie działa natywnie z Emscripten/WebAssembly — trzeba go skompilować z odpowiednimi flagami lub korzystać z prekompilowanej wersji.

FBX zapisany w ASCII z Blenderem ma większe szanse na działanie w Assimp niż binarny FBX.

Chcesz, żebym dostosował też loader do FBX z wieloma teksturami lub materiałami?
Daj znać — to tylko kilka linijek więcej.






Nie wybrano plikuNie wybrano pliku
Mesh loadMeshFromAssimp2(const std::string& path, std::unordered_map<std::string, Material>& materialsOut, const std::string& basePath) {
    Mesh mesh;
    Assimp::Importer importer;

    const aiScene* scene = importer.ReadFile(path,
        aiProcess_Triangulate | aiProcess_JoinIdenticalVertices | aiProcess_GenSmoothNormals | aiProcess_FlipUVs);

    if (!scene || !scene->HasMeshes()) {
        printf("Assimp error: %s\n", importer.GetErrorString());
        return mesh;
    }

    const aiMesh* m = scene->mMeshes[0];

    for (unsigned int i = 0; i < m->mNumVertices; ++i) {
        aiVector3D pos = m->mVertices[i];
        aiVector3D uv = m->HasTextureCoords(0) ? m->mTextureCoords[0][i] : aiVector3D(0, 0, 0);
        aiVector3D norm = m->mNormals[i];

        mesh.vertices.push_back(pos.x);
        mesh.vertices.push_back(pos.y);
        mesh.vertices.push_back(pos.z);

        mesh.vertices.push_back(uv.x);
        mesh.vertices.push_back(uv.y);

        mesh.vertices.push_back(norm.x);
        mesh.vertices.push_back(norm.y);
        mesh.vertices.push_back(norm.z);
    }

    for (unsigned int i = 0; i < m->mNumFaces; ++i) {
        aiFace& face = m->mFaces[i];
        for (unsigned int j = 0; j < face.mNumIndices; ++j)
            mesh.indices.push_back(face.mIndices[j]);
    }

    // Normalize model (center & scale)
    float minX=1e10f, maxX=-1e10f, minY=1e10f, maxY=-1e10f, minZ=1e10f, maxZ=-1e10f;
    for (size_t i = 0; i < mesh.vertices.size(); i += 8) {
        float x = mesh.vertices[i + 0];
        float y = mesh.vertices[i + 1];
        float z = mesh.vertices[i + 2];
        minX = std::min(minX, x); maxX = std::max(maxX, x);
        minY = std::min(minY, y); maxY = std::max(maxY, y);
        minZ = std::min(minZ, z); maxZ = std::max(maxZ, z);
    }
    float cx = (minX + maxX) / 2.f;
    float cy = (minY + maxY) / 2.f;
    float cz = (minZ + maxZ) / 2.f;
    float scale = 1.f / std::max({maxX - minX, maxY - minY, maxZ - minZ});
    for (size_t i = 0; i < mesh.vertices.size(); i += 8) {
        mesh.vertices[i + 0] = (mesh.vertices[i + 0] - cx) * scale;
        mesh.vertices[i + 1] = (mesh.vertices[i + 1] - cy) * scale;
        mesh.vertices[i + 2] = (mesh.vertices[i + 2] - cz) * scale;
    }

    // Load material texture path (only first diffuse texture)
    if (scene->HasMaterials()) {
        aiMaterial* mat = scene->mMaterials[m->mMaterialIndex];
        aiString texPath;
        if (mat->GetTexture(aiTextureType_DIFFUSE, 0, &texPath) == AI_SUCCESS) {
            Material material;
            material.texPath = std::string(texPath.C_Str());
            materialsOut["default"] = material;
        }
    }

    return mesh;
} może popełniać błędy. Sprawdź ważne informacje. Zobacz Preferencje dotyczące plików cookie.
